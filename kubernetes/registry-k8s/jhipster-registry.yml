# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : `kubectl apply -f jhipster-registry.yml`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   `kubectl delete pod jhipster-registry-0`, `kubectl delete pod jhipster-registry-1`
apiVersion: v1
kind: Secret
metadata:
    name: registry-secret
    namespace: billmanagement
type: Opaque
data:
    registry-admin-password: YWRtaW4= # base64 encoded "admin"
---
apiVersion: v1
kind: Service
metadata:
    name: jhipster-registry
    namespace: billmanagement
    labels:
        app: jhipster-registry
spec:
    ports:
        - port: 8761
          name: http
          nodePort: 30100
    type: NodePort
    publishNotReadyAddresses: true
    selector:
        app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: jhipster-registry
    namespace: billmanagement
spec:
    # added to circumvent kustomize bug
    # volumeClaimTemplates: []
    serviceName: jhipster-registry
    replicas: 2
    selector:
        matchLabels:
            app: jhipster-registry
            version: '1.0'
    template:
        metadata:
            labels:
                app: jhipster-registry
                version: '1.0'
        spec:
            terminationGracePeriodSeconds: 10
            containers:
                - name: jhipster-registry
                  image: jhipster/jhipster-registry:v7.4.0
                  ports:
                      - containerPort: 8761
                  env:
                      # StatefulSet specific configuration
                      # Registry configuration
                      - name: SPRING_PROFILES_ACTIVE
                        value: prod,k8s,oauth2
                      - name: SPRING_SECURITY_USER_PASSWORD
                        valueFrom:
                            secretKeyRef:
                                name: registry-secret
                                key: registry-admin-password
                      - name: MINIKUBE_IP
                        valueFrom:
                            configMapKeyRef:
                                name: minikube-cm
                                key: minikube-ip
                      - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
                        value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
                      - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
                        value: native
                      - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
                        value: file:./central-config
                      - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
                        value: '15'
                      - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
                        value: '30'
                      - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
                        value: '15000'
                      - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
                        value: '15000'
                      - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
                        value: '3'
                      - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
                        value: 'false'
                      - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
                        value: '2000'
                      - name: EUREKA_CLIENT_FETCH_REGISTRY
                        value: 'true'
                      - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
                        value: 'true'
                      - name: K8S_CONFIG_PATH
                        value: '/central-config/'
                      - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI
                        value: http://$(MINIKUBE_IP):30001/realms/jhipster
                      # Custom trustStore required when using Let's Encrypt staging
                      - name: JAVA_OPTS
                        value: '-Djavax.net.ssl.trustStore=/etc/pki/java/cacerts -Djavax.net.ssl.trustStorePassword=123456'
                      - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID
                        value: jhipster-registry
                      - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET
                        value: jhipster-registry
                  volumeMounts:
                      - name: config-volume
                        mountPath: /central-config
                  # Custom trustStore required when using Let's Encrypt staging
                  # - name: java-truststore
                  #   mountPath: /etc/pki/java
            volumes:
                - name: config-volume
                  configMap:
                      name: application-config
            # When using Let's Encrypt staging certificates, for a successful start, add CAs to java truststore
            # - name: java-truststore
            #  secret:
            #    secretName: letsencrypt-ca-secret
            #    items:
            #    - key: truststore.jks
            #      path: cacerts
